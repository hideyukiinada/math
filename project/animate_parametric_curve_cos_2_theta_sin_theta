#!/usr/bin/env python
"""
Generates an animation to illustrate how a parametric curve
is formed by changing the value of theta.

In this code, a curve is defined as:
Parametric curve r(theta) = <x(theta), y(theta)> = <cos(2theta), sin(theta)>

Credit
------
    In writing code to animate a circle on the curve, I used the below page as a reference.
    I would like to thank Mr. Vanderplas for making the tutorial available:
    https://jakevdp.github.io/blog/2012/08/18/matplotlib-animation-tutorial/

References
----------
    https://matplotlib.org/api/_as_gen/matplotlib.pyplot.subplot.html
    https://matplotlib.org/api/_as_gen/matplotlib.patches.Circle.html

Notes
-----
    1. RenderData class
    This class is defined to avoid making rendered data objects global.
    This is because update frame and init frame call back functions do not have access to
    loca

    2. TeX
    Additional package that supports TeX may be required depending on your matplotlib set up.
    If you don't have a TeX set up, you can comment out two plt.rc() lines and tweak messages that have math symbols.

    3. Virtualenv
    I use virtualenv to run this.  I haven't tried in other Python environment, but it should work if the required
    Python packages are in place.

__author__ = "Hide Inada"
__copyright__ = "Copyright 2018, Hide Inada"
__license__ = "The MIT License"
__email__ = "hideyuki@gmail.com"
"""
import os.path
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.patches as patches
from matplotlib import animation

# Configurable parameters
IMAGE_WIDTH = 1280  # px
IMAGE_HEIGHT = 720  # px
DPI = 100  # Change image size if you change this.
PLOT_X_LIMIT = (-1.5, 1.5)
PLOT_Y_LIMIT = (-1.2, 1.2)
NUM_LOOPS = 4
NUM_DATA_POINTS = 360 * NUM_LOOPS
DELAY_BETWEEN_FRAMES = 2  # Delay between frames in ms.

PLOT_TITLE = r"$\vec r(\theta)=<cos 2\theta, sin\theta>$"
BASE_TEXT_FONT = 'serif'
TITLE_COLOR = '#111111'
TITLE_FONT_SIZE = 16
LINE_COLOR = "#2B6EFF"
CIRCLE_RADIUS = 0.03
CIRCLE_FACE_COLOR = '#FF484F'
LABEL_LABEL_COLOR = '#000000'
LABEL_BACKGROUND_COLOR = 'red'
LABEL_BACKGROUND_ALPHA = 0.2
LABEL_POSITION_X = 0.85
LABEL_POSITION_Y = 0.05  # (0, 0) is bottom-left
OUTPUT_VIDEO_FILE = 'parametric_curve_demo.mp4'


class RenderCurve:
    def __init__(self):
        """ Initiailze objects to be rendered.

        Parameters
        ----------
        self: class reference
            Reference to this instance
        """

        self.plotted_line = None
        self.circle = None
        self.theta_text = None

    def set_up_plot(self):
        """Set up matplotlib's data objects including plot and axes

        Parameters
        ----------
        self: class reference
            Reference to this instance

        Returns
        -------
        fig
            Top-level container of the plot
        """

        # Set up Tex to use in title and text.
        plt.rc('text', usetex=True)
        plt.rc('font', family=BASE_TEXT_FONT)

        fig = plt.figure(figsize=(IMAGE_WIDTH / DPI, IMAGE_HEIGHT / DPI),
                         dpi=DPI)  # fig size is in inch

        ax = fig.add_subplot(111,  # 1 row high, 1 col wide at index #1
                             aspect='equal',
                             autoscale_on=False,
                             xlabel='x',
                             ylabel='y',
                             xlim=PLOT_X_LIMIT,
                             ylim=PLOT_Y_LIMIT)

        plt.title(PLOT_TITLE, fontsize=TITLE_FONT_SIZE, color=TITLE_COLOR)

        # Add a circle to the plot
        self.circle = patches.Circle(xy=(0, 0),  # center position of the circle
                                     radius=CIRCLE_RADIUS,
                                     facecolor=CIRCLE_FACE_COLOR)  # Fill color.  Set to red

        ax.add_patch(self.circle)
        self.plotted_line, = ax.plot([], [], color=LINE_COLOR)
        self.theta_text = ax.text(LABEL_POSITION_X,
                                  LABEL_POSITION_Y,
                                  '',
                                  transform=ax.transAxes,
                                  color=LABEL_LABEL_COLOR,
                                  bbox=dict(facecolor=LABEL_BACKGROUND_COLOR,
                                            alpha=LABEL_BACKGROUND_ALPHA))

        return fig

    def init_frame(self):
        """Initialize the animation frame

        Parameters
        ----------
        self: class reference
            Reference to this instance

        Returns
        -------
        self.plotted_line
            Line object to be rendered
        self.circle
            Circle object to be rendered
        self.theta_text
            Text object to show the current value of theta
        """

        self.plotted_line.set_data([], [])
        self.circle.center = (0, 0)
        self.theta_text.set_text("")

        return self.plotted_line, self.circle, self.theta_text

    def update_frame(self, i):
        """Update a single animation frame
    
        Parameters
        ----------
        self: class reference
            Reference to this instance
        i : int
            Frame index of the animation
    
        Returns
        -------
        self.plotted_line
            Line object to be rendered
        self.circle
            Circle object to be rendered
        self.theta_text
            Text object to show the current value of theta
        """

        # Generate data.  In this particulate case, x, y pos of the curve do not move
        # so we can move the generator out of this function to further optimize.
        # However, if you want to move the curve position for each frame, you need to have the generator here.
        theta = np.linspace(start=0, stop=NUM_LOOPS * (2 * np.pi), num=NUM_DATA_POINTS)
        r = 1  # radius
        x = r * np.cos(2 * theta)
        y = r * np.sin(theta)

        self.plotted_line.set_data(x, y)
        self.circle.center = (x[i], y[i])

        current_theta_in_pi = theta[i] / np.pi
        self.theta_text.set_text(r"$\theta = %0.2f \pi \,rad$" % (current_theta_in_pi))

        return self.plotted_line, self.circle, self.theta_text

    def plot(self):
        """Plot animation

        Parameters
        ----------
        self: class reference
            Reference to this instance
        """
        fig = self.set_up_plot()

        animation_rendered = animation.FuncAnimation(fig,
                                                     self.update_frame,
                                                     init_func=self.init_frame,
                                                     frames=NUM_DATA_POINTS,
                                                     interval=DELAY_BETWEEN_FRAMES,
                                                     blit=True)

        # To save to a video, uncomment the below line and comment out plt.show()
        # animation_rendered.save(OUTPUT_VIDEO_FILE, fps=30, extra_args=['-vcodec', 'libx264'])
        plt.show()


def main():
    """Defines an application's main functionality"""
    curve = RenderCurve();
    curve.plot()


if __name__ == "__main__":
    main()
